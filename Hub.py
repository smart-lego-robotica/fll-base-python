from pybricks.hubs import PrimeHub
from pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor, ForceSensor
from pybricks.parameters import Button, Color, Direction, Port, Side, Stop, Axis
from pybricks.robotics import DriveBase
from pybricks.tools import wait, StopWatch

class Constants:
    """
    Constantes de configuraÃ§Ã£o do Hub.

    Attributes:
        TOP_SIDE (Axis): Eixo superior do Hub (orientaÃ§Ã£o).
        FRONT_SIDE (Axis): Eixo frontal do Hub (orientaÃ§Ã£o).
    """

    TOP_SIDE = -Axis.X
    FRONT_SIDE = Axis.Y


class Hub:
    """
    Classe responsÃ¡vel pelo gerenciamento do PrimeHub.

    Permite configurar a orientaÃ§Ã£o do Hub, alÃ©m de acessar e
    manipular a guinada (heading) do giroscÃ³pio interno.

    Attributes:
        hub (PrimeHub): InstÃ¢ncia do Hub principal.
    """

    def __init__(self):
        """
        Inicializa o Hub com a orientaÃ§Ã£o definida em `Constants`.
        """
        self.hub = PrimeHub(top_side= Constants.TOP_SIDE, front_side= Constants.FRONT_SIDE)
        self.hub.display.orientation(up=Side.RIGHT)
        self.hub.system.set_stop_button(Button.BLUETOOTH)
        self.verificarNivelBateria()

    def verificarNivelBateria(self):
        """
        Verifica o nÃ­vel da bateria do Hub e acende o LED indicador.

        O mÃ©todo mede a tensÃ£o da bateria e exibe o estado usando
        o LED central do Hub, com base nos seguintes intervalos:

            - ğŸŸ¢ Verde: Bateria carregada (voltagem > 8200 mV)
            - ğŸŸ¡ Amarelo: NÃ­vel mÃ©dio (7500 < voltagem <= 8200 mV)
            - ğŸ”´ Vermelho: Bateria fraca (voltagem <= 7500 mV)

        Example:
            hub.verificarNivelBateria()
            # O LED acenderÃ¡ em verde, amarelo ou vermelho dependendo do nÃ­vel.
    """
        voltage = self.hub.battery.voltage()
        print(voltage)
        if (voltage > 8200):
            # Carregada
            self.hub.light.on(Color.GREEN)
        elif (voltage > 7500 and voltage <= 7900):
            # MÃ©dio
            self.hub.light.on(Color.YELLOW)
        else:
            # Descarregada
            self.hub.light.on(Color.RED)


    def resetarGuinada(self):
        """
        Reseta a guinada (heading) do giroscÃ³pio para 0 graus.

        Example:
            hub.resetarGuinada()
        """
        self.hub.imu.reset_heading(0)

    def pegarGuinada(self):
        """
        ObtÃ©m o valor atual da guinada (heading) do giroscÃ³pio.

        Returns:
            int: Ã‚ngulo atual em graus, relativo Ã  orientaÃ§Ã£o definida.

        Example:
            angulo = hub.pegarGuinada()
            print(angulo)  # ex: 45
        """
        return self.hub.imu.heading()
