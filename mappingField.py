from pybricks.hubs import PrimeHub
from pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor, ForceSensor
from pybricks.parameters import Button, Color, Direction, Port, Side, Stop
from pybricks.robotics import DriveBase
from pybricks.tools import wait, StopWatch, multitask, run_task
from Chassi import Chassi, Speed
from SoundEffects import SoundEffects
from Anexo import Anexo
from Hub import Hub

# Fun√ß√£o para mostrar informa√ß√µes formatadas
def mostrarInformacoes(posicaoAtual: int, distancia: float, heading: float):
    print("\n" + "="*30)
    print(f"üìç Posi√ß√£o {posicaoAtual}")
    print("-"*30)
    print(f"üìè Dist√¢ncia percorrida: {distancia:>7.2f} mm")
    print(f"üß≠ √Çngulo de heading:    {heading:>7.2f}¬∞")
    print("="*30 + "\n")

# Fun√ß√£o principal ass√≠ncrona
async def run(chassi: Chassi, anexo: Anexo, hub: Hub, soundEffects: SoundEffects):
    def resetarDados():
        hub.hub.imu.reset_heading(angle=0)
        chassi.driveBase.reset(distance=0, angle=0)

    def pegarHeading():
        return hub.hub.imu.heading()

    def pegarDistancia():
        return chassi.driveBase.distance()

    posicaoAtual = 1

    await soundEffects.beep()
    print("üîÑ Inicializando...")
    print("‚ñ∂Ô∏è Aperte o bot√£o central para come√ßar")

    while Button.CENTER not in hub.hub.buttons.pressed():
        pass

    await soundEffects.beep(300, 200)
    resetarDados()

    while True:
        print(f"\n‚è≥ Aguardando leitura da {posicaoAtual}¬™ posi√ß√£o...")
        print("‚ñ∂Ô∏è Aperte o bot√£o central para registrar")

        while Button.CENTER not in hub.hub.buttons.pressed():
            pass

        await soundEffects.beep(300, 200)

        while Button.CENTER in hub.hub.buttons.pressed():
            pass

        await soundEffects.beep(100, 10)
        await soundEffects.beep(200, 50)
        await soundEffects.beep(500, 130)

        # Coleta e exibe os dados formatados
        distancia = pegarDistancia()
        heading = pegarHeading()
        mostrarInformacoes(posicaoAtual, distancia, heading)

        resetarDados()
        posicaoAtual += 1

# Execu√ß√£o principal
if __name__ == "__main__":
    hub = Hub()
    chassi = Chassi(hub)
    anexo = Anexo(hub)
    soundEffects = SoundEffects(hub=hub.hub)
    run_task(run(chassi, anexo, hub, soundEffects))
